if(data_type=="DNA"){
#print("starting phangorn::phyDat(ape::as.DNAbin(t(as.matrix(dplyr::bind_rows(seqs)))))")
data <- phangorn::phyDat(ape::as.DNAbin(t(as.matrix(dplyr::bind_rows(seqs)))))
}else{
#print('starting phangorn::phyDat(ape::as.AAbin(t(as.matrix(dplyr::bind_rows( seqs)))),
#                       type="AA")')
data <- phangorn::phyDat(ape::as.AAbin(t(as.matrix(dplyr::bind_rows( seqs)))),
type="AA")
#print(sub_model)
if(sub_model == "GTR"){
warning("GTR model shouldn't be used for AA.")
}
}
#print('phyDat completed')
if(is.null(tree)){
#print("starting the options for if tree is null")
dm  <- phangorn::dist.ml(data)
treeNJ  <- ape::multi2di(phangorn::NJ(dm), random=resolve_random)
treeNJ$edge.length[treeNJ$edge.length < 0] <- 0 #change negative edge lengths to zero
pml <- phangorn::pml(ape::unroot(treeNJ),data=data)
fit <- tryCatch(phangorn::optim.pml(pml, model=sub_model, optNni=optNni, optQ=optQ,
optGamma=gamma, rearrangement="NNI",control=phangorn::pml.control(epsilon=1e-08,
maxit=10, trace=0)), error=function(e)e)
#print("primary fit completed")
#print("checking for errors")
if("error" %in% class(fit)){
if(verbose){
print(fit)
}
#print("fit completed")
return(fit)
}
#print("unrooting tree")
#tree <- ape::unroot(ape::multi2di(fit$tree)) #CGJ 4/4/23
tree <- fit$tree
# test if the tree is binary
if(!ape::is.binary(tree)){
warning(paste("Tree may not be full resolved at", clone@clone))
}
#print("adding tree method and edge type")
tree$tree_method <- paste("phangorn::optim.pml::",sub_model)
tree$edge_type <- "genetic_distance"
#print("creating nnodes")
nnodes <- length(unique(c(tree$edge[,1],tree$edge[,2])))
#print("creating nodes")
tree$nodes <- rep(list(sequence=NULL),times=nnodes)
}
#print("adding name and seq")
tree$name <- clone@clone
tree$seq <- seq
if(asr != "none" && data_type=="DNA"){
#print("ancestral pml started")
seqs_ml <- phangorn::ancestral.pml(fit,
type="marginal",return="prob")
ASR <- list()
for(i in 1:max(tree$edge)){
# KBH
patterns <- t(subset(seqs_ml, i)[[1]])
pat <- patterns[,attr(seqs_ml,"index")]
if(asr == "seq"){
thresh <- pat > asr_thresh
acgt <- c("A","C","G","T")
seq_ar <- unlist(lapply(1:ncol(pat),function(x){
site <- acgt[thresh[,x]]
site <- alakazam::DNA_IUPAC[[paste(sort(site),collapse="")]]
if(length(site) == 0){
site <- "N"
}
site}))
ASR[[as.character(i)]] <- paste(seq_ar,collapse="")
}else{
ASR[[as.character(i)]] <- pat
}
}
#print("ASR completed")
#print("starting tree$nodes")
#tree$sequences <- ASR
tree$nodes <- lapply(1:length(tree$nodes),function(x){
tree$nodes[[x]]$sequence <- ASR[[x]]
tree$nodes[[x]]
})
}
#print("rerooting tree")
tree <- rerootTree(tree,"Germline",verbose=0)
ntip <- length(tree$tip.label)
uca <- ntip+1
tree_from_build <- tree
olength <- sum(tree$edge.length)
odiv <- ape::cophenetic.phylo(tree)[germline,]
germline <- "Germline"
min<-0.001
verbose=0
ntip <- length(tree$tip.label)
uca <- ntip+1
if(!germline %in% tree$tip.label){
stop(paste(germline,"not found in tip labels!"))
}
olength <- sum(tree$edge.length)
odiv <- ape::cophenetic.phylo(tree)[germline,]
if(ape::is.rooted(tree)){
if(verbose > 0){
print("unrooting tree!")
}
root <- ape::getMRCA(tree,
tip=tree$tip.label)
max <- max(tree$edge)
rindex <- tree$edge[,1] == root
redge <- tree$edge[rindex,]
parent <- redge[1,2]
child <- redge[2,2]
if(parent <= length(tree$tip.label)){
parent <- redge[2,2]
child <- redge[1,2]
}
if(tree$tip.label[child] == germline &&
tree$edge.length[tree$edge[,1] == root &
tree$edge[,2] == child] <= min){
if(verbose > 0){
print("tree already rooted at germline!")
}
return(tree)
}
warning("Rooting already rooted trees not fully supported.")
# if tree rooted somewhere besides the germline
# cut out the root node and directly attach
# its former descendants to each other.
tree$edge <- tree$edge[!rindex,]
tree$edge <- rbind(tree$edge,c(parent,child))
sumedge <- sum(tree$edge.length[rindex])
tree$edge.length <- tree$edge.length[!rindex]
tree$edge.length[length(tree$edge.length)+1] <- sumedge
tree$Nnode <- tree$Nnode - 1
if(parent != uca){
#if new parent doesn't have correct uca number, swap it
#uca node should have been the node that was cut out
#if not the parent
if(uca %in% tree$edge){
stop("something weird happened during unrooting")
}
root <- parent
tree$edge[tree$edge[,1]==parent,1] <- uca
tree$edge[tree$edge[,2]==parent,2] <- uca
if(!is.null(tree$nodes)){
s <- tree$nodes[[uca]]
tree$nodes[[uca]] <- tree$nodes[[parent]]
tree$nodes[[parent]] <- s
}
}
# set the node information for the appropriate root
tree$edge[tree$edge[,1]==max,1] <- root
tree$edge[tree$edge[,2]==max,2] <- root
if(!is.null(tree$nodes)){
tree$nodes[[max]] <- tree$nodes[[root]]
tree$nodes[[max]] <- NULL
}
}
ape::is.rooted(tree)
if(verbose > 0){
print("unrooting tree!")
}
root <- ape::getMRCA(tree,
tip=tree$tip.label)
root
max <- max(tree$edge)
max
rindex <- tree$edge[,1] == root
rindex
redge <- tree$edge[rindex,]
redge
parent <- redge[1,2]
child <- redge[2,2]
parent
child
parent <= length(tree$tip.label)
child
tree$tip.label[child]
redge
tree$edge[,1]
root
tree$edge
tree$tip.label
tree$edge[,1] == 49
table(tree$edge[,1] == 49)
tree$edge.length
redge
tree$tip.label[53]
tree$tip.label[51]
tree$tip.label[49]
ntip
root
clone <- readRDS("~/Downloads/clone.rds")
#output_name <- paste0("pml_output_rep_", rep, "_clone_", clone@clone, ".txt")
#sink(file=output_name)
#print(paste0("PML tree ", rep, " ", clone@clone, " started"))
#stop(file_conn)
seqs <- clone@data[[seq]]
names <- clone@data$sequence_id
if(length(seqs) < 2){
stop(paste0(clone@clone," has only one sequence, skipping"))
}
if(seq == "hlsequence"){
germline <- clone@hlgermline
}else if(seq == "lsequence"){
germline <- clone@lgermline
}else{
germline <- clone@germline
}
seqs <- base::append(seqs,germline)
names <- c(names,"Germline")
seqs <- strsplit(seqs,split="")
names(seqs) <- names
#print("seqs, names, and germline created")
#print("phyDat started")
if(data_type=="DNA"){
#print("starting phangorn::phyDat(ape::as.DNAbin(t(as.matrix(dplyr::bind_rows(seqs)))))")
data <- phangorn::phyDat(ape::as.DNAbin(t(as.matrix(dplyr::bind_rows(seqs)))))
}else{
#print('starting phangorn::phyDat(ape::as.AAbin(t(as.matrix(dplyr::bind_rows( seqs)))),
#                       type="AA")')
data <- phangorn::phyDat(ape::as.AAbin(t(as.matrix(dplyr::bind_rows( seqs)))),
type="AA")
#print(sub_model)
if(sub_model == "GTR"){
warning("GTR model shouldn't be used for AA.")
}
}
#print('phyDat completed')
if(is.null(tree)){
#print("starting the options for if tree is null")
dm  <- phangorn::dist.ml(data)
treeNJ  <- ape::multi2di(phangorn::NJ(dm), random=resolve_random)
treeNJ$edge.length[treeNJ$edge.length < 0] <- 0 #change negative edge lengths to zero
pml <- phangorn::pml(ape::unroot(treeNJ),data=data)
fit <- tryCatch(phangorn::optim.pml(pml, model=sub_model, optNni=optNni, optQ=optQ,
optGamma=gamma, rearrangement="NNI",control=phangorn::pml.control(epsilon=1e-08,
maxit=10, trace=0)), error=function(e)e)
#print("primary fit completed")
#print("checking for errors")
if("error" %in% class(fit)){
if(verbose){
print(fit)
}
#print("fit completed")
return(fit)
}
#print("unrooting tree")
#tree <- ape::unroot(ape::multi2di(fit$tree)) #CGJ 4/4/23
tree <- fit$tree
# test if the tree is binary
if(!ape::is.binary(tree)){
warning(paste("Tree may not be full resolved at", clone@clone))
}
#print("adding tree method and edge type")
tree$tree_method <- paste("phangorn::optim.pml::",sub_model)
tree$edge_type <- "genetic_distance"
#print("creating nnodes")
nnodes <- length(unique(c(tree$edge[,1],tree$edge[,2])))
#print("creating nodes")
tree$nodes <- rep(list(sequence=NULL),times=nnodes)
}
#print("adding name and seq")
tree$name <- clone@clone
tree$seq <- seq
if(asr != "none" && data_type=="DNA"){
#print("ancestral pml started")
seqs_ml <- phangorn::ancestral.pml(fit,
type="marginal",return="prob")
ASR <- list()
for(i in 1:max(tree$edge)){
# KBH
patterns <- t(subset(seqs_ml, i)[[1]])
pat <- patterns[,attr(seqs_ml,"index")]
if(asr == "seq"){
thresh <- pat > asr_thresh
acgt <- c("A","C","G","T")
seq_ar <- unlist(lapply(1:ncol(pat),function(x){
site <- acgt[thresh[,x]]
site <- alakazam::DNA_IUPAC[[paste(sort(site),collapse="")]]
if(length(site) == 0){
site <- "N"
}
site}))
ASR[[as.character(i)]] <- paste(seq_ar,collapse="")
}else{
ASR[[as.character(i)]] <- pat
}
}
#print("ASR completed")
#print("starting tree$nodes")
#tree$sequences <- ASR
tree$nodes <- lapply(1:length(tree$nodes),function(x){
tree$nodes[[x]]$sequence <- ASR[[x]]
tree$nodes[[x]]
})
}
#print("rerooting tree")
tree <- rerootTree(tree,"Germline",verbose=0)
germline
germline <- "Germline"
min
verbose
ntip <- length(tree$tip.label)
uca <- ntip+1
if(!germline %in% tree$tip.label){
stop(paste(germline,"not found in tip labels!"))
}
olength <- sum(tree$edge.length)
odiv <- ape::cophenetic.phylo(tree)[germline,]
ape::is.rooted(tree)
root <- ape::getMRCA(tree,
tip=tree$tip.label)
root
max <- max(tree$edge)
rindex <- tree$edge[,1] == root
redge <- tree$edge[rindex,]
redge
max <- max(tree$edge)
max
rindex <- tree$edge[,1] == root
rindex
redge <- tree$edge[rindex,]
redge
parent <- redge[1,2]
parent
parent <= length(tree$tip.label)
min
ape::is.rooted(fit$tree)
ape::is.rooted(pml$tree)
fit <- tryCatch(phangorn::optim.pml(pml, model=sub_model, optNni=optNni, optQ=optQ,
optGamma=gamma, rearrangement="NNI",control=phangorn::pml.control(epsilon=1e-08,
maxit=10, trace=0)), error=function(e)e)
ape::is.rooted(fit$tree)
?phangorn::optim.pml
plot(fit$tree)
plot(tree)
plot(ape::unroot(trees))
plot(ape::unroot(tree))
plot(rerootTree(ape::unroot(tree)))
plot(rerootTree(ape::unroot(tree)), "Germline",verbose=0)
plot(rerootTree(ape::unroot(tree)), germline ="Germline",verbose=0)
plot(rerootTree(ape::unroot(tree), germline ="Germline",verbose=0))
plot(pml)
ntip
root
root = 49
rindex <- tree$edge[,1] == root
rindex
root <- ape::getMRCA(tree,
tip=tree$tip.label)
max <- max(tree$edge)
tree$edge[!rindex,]
tree_og <- tree
# if tree rooted somewhere besides the germline
# cut out the root node and directly attach
# its former descendants to each other.
tree$edge <- tree$edge[!rindex,]
tree$edge
tree_og$edge
tree$edge <- rbind(tree$edge,c(parent,child))
tree$edge
sumedge <- sum(tree$edge.length[rindex])
sumedge
tree$edge.length[rindex]
rindex
tree <- tree_og
root <- ape::getMRCA(tree,
tip=tree$tip.label)
max <- max(tree$edge)
rindex <- tree$edge[,1] == root
redge <- tree$edge[rindex,]
parent <- redge[1,2]
child <- redge[2,2]
# if tree rooted somewhere besides the germline
# cut out the root node and directly attach
# its former descendants to each other.
tree$edge <- tree$edge[!rindex,]
tree$edge <- rbind(tree$edge,c(parent,child))
sumedge <- sum(tree$edge.length[rindex])
sumedge
tree$edge.length[rindex]
tree$edge.length[!rindex]
rindex
tree$edge.length[length(tree$edge.length)+1] <- sumedge
tree$Nnode <- tree$Nnode - 1
parent != uca
uca
parent
uca %in% tree$edge
root <- parent
root
parent
redge
tree$edge[tree$edge[,1]==parent,1]
tree$edge[tree$edge[,1]==parent,]
tree$edge[tree$edge[,1]==parent,1] <- uca
tree$edge[tree$edge[,2]==parent,2] <- uca
tree$edge[tree$edge[,2]==parent,]
tree$edge[tree$edge[,1]==parent,]
tree$edge
53 %in% tree$edge[,2]
!is.null(tree$nodes)
s <- tree$nodes[[uca]]
s
parent
uca
s
tree$edge
54 %in% tree$edge[,1]
54 %in% tree$edge[,2]
root
tree$edge[tree$edge[,1]==max,1]
tree$edge[tree$edge[,2]==max,2]
max(tree_og$edge)
root
ape::getMRCA(tree,
tip=tree$tip.label)
ape::getMRCA(tree_og, tip=tree_og$tip.label)
ndist
test <- ape::root(tree_og, "Germline")
plot(test)
rerootTree(test, "Germline", verbose = 0)
names(fit)
fit$data
fit$df
View(fit)
fit$INV
#print("unrooting tree")
#tree <- ape::unroot(ape::multi2di(fit$tree)) #CGJ 4/4/23
fit$tree <- ape::unroot(ape::multi2di(fit$tree))
tree <- fit$tree
# test if the tree is binary
if(!ape::is.binary(tree)){
warning(paste("Tree may not be full resolved at", clone@clone))
}
#print("adding tree method and edge type")
tree$tree_method <- paste("phangorn::optim.pml::",sub_model)
tree$edge_type <- "genetic_distance"
#print("creating nnodes")
nnodes <- length(unique(c(tree$edge[,1],tree$edge[,2])))
#print("creating nodes")
tree$nodes <- rep(list(sequence=NULL),times=nnodes)
#print("adding name and seq")
tree$name <- clone@clone
tree$seq <- seq
#print("ancestral pml started")
seqs_ml <- phangorn::ancestral.pml(fit,
type="marginal",return="prob")
seqs_ml
ASR <- list()
for(i in 1:max(tree$edge)){
# KBH
patterns <- t(subset(seqs_ml, i)[[1]])
pat <- patterns[,attr(seqs_ml,"index")]
if(asr == "seq"){
thresh <- pat > asr_thresh
acgt <- c("A","C","G","T")
seq_ar <- unlist(lapply(1:ncol(pat),function(x){
site <- acgt[thresh[,x]]
site <- alakazam::DNA_IUPAC[[paste(sort(site),collapse="")]]
if(length(site) == 0){
site <- "N"
}
site}))
ASR[[as.character(i)]] <- paste(seq_ar,collapse="")
}else{
ASR[[as.character(i)]] <- pat
}
}
max(tree$edge)
#print("ASR completed")
#print("starting tree$nodes")
#tree$sequences <- ASR
tree$nodes <- lapply(1:length(tree$nodes),function(x){
tree$nodes[[x]]$sequence <- ASR[[x]]
tree$nodes[[x]]
})
if(asr != "none" && data_type=="DNA"){
#print("ancestral pml started")
seqs_ml <- phangorn::ancestral.pml(fit,
type="marginal",return="prob")
ASR <- list()
for(i in 1:max(tree$edge)){
# KBH
patterns <- t(subset(seqs_ml, i)[[1]])
pat <- patterns[,attr(seqs_ml,"index")]
if(asr == "seq"){
thresh <- pat > asr_thresh
acgt <- c("A","C","G","T")
seq_ar <- unlist(lapply(1:ncol(pat),function(x){
site <- acgt[thresh[,x]]
site <- alakazam::DNA_IUPAC[[paste(sort(site),collapse="")]]
if(length(site) == 0){
site <- "N"
}
site}))
ASR[[as.character(i)]] <- paste(seq_ar,collapse="")
}else{
ASR[[as.character(i)]] <- pat
}
}
#print("ASR completed")
#print("starting tree$nodes")
#tree$sequences <- ASR
tree$nodes <- lapply(1:length(tree$nodes),function(x){
tree$nodes[[x]]$sequence <- ASR[[x]]
tree$nodes[[x]]
})
}
#print("rerooting tree")
tree <- rerootTree(tree,"Germline",verbose=0)
plot(tree)
seqs_ml
